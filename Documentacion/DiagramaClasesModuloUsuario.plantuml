@startuml
package Model{
    class Persona{
        - nombre: String
        - apellido : String 
        - id: Long
        - numeroTelefono : String
        - correo : String
        - fechaNacimiento: String
        
    }

    class Rol{
        - id: Long 
        - nombreRol: String 
    }
    class Usuario{
        - id : Long
        -user_name: String
        -user_password :String
        -persona : Persona
        - rol: Rol
    }

    Usuario ..> Persona
    Rol <.. Usuario

}
package dto{
    class PersonaDTO{
        - nombre: String
        - apellido : String 
        - id: Long
        - numeroTelefono : String
        - correo : String
        - fechaNacimiento: String
    }
    class RolDTO{
        - id: Long 
        - nombreRol: String
    }
    class UsuarioDTO{
         - id : Long
        -user_name: String
        -user_password :String
        -persona : PersonaDTO
        - rol: RolDTO
    }
}
package mapper{
    interface PersonaMapper{
        + toDTO(persona:Persona) : PersonaDTO
        + toEntity(personaDTO : PersonaDTO) : Persona
    }
    class PersonaMapperImplement{
        + toDTO(persona:Persona) : PersonaDTO
        + toEntity(personaDTO : PersonaDTO) : Persona
    }
    interface RolMapper{
        + toDTO(rol:Rol) : RolDTO
        + toEntity(rolDTO : RolDTO) : Rol
    }
    class RolMapperImplement{
        + toDTO(rol:Rol) : RolDTO
        + toEntity(rolDTO : RolDTO) : Rol
    }
    interface UsuarioMapper{
        + toDTO(usuario:Usuario) : UsuarioDTO
        + toEntity(usuarioDTO : UsuarioDTO) : Usuario
    }
    class UsuarioMapperImplement{
        + toDTO(usuario:Usuario) : UsuarioDTO
        + toEntity(usuarioDTO : UsuarioDTO) : Usuario
    }
}
package service{
    class PersonaService{
        - personaRepository : PersonaRepository
        - personaMapper : PersonaMapper
        + addPersonaInDB(personaDTO:PersonaDTO):PersonaDTO
        + findAllPersonas(): List<PersonaDTO>
        + fetchPersonaById(id:Long):ResponseEntity<PersonaDTO>
        + findById(id: Long): Optional<PersonaDTO>

        
    }
    class RolService{
        - rolRepository : RolRepository
        + guardarRol(rol:Rol): Rol
    }
    class UsuarioService{
        - usuarioRepository:UsuarioRepository
        - usuarioMapper:UsuarioMapper
        + findAllUsuarios(): List<UsuarioDTO>
        + addUsuarioInDB(usuarioDTO:UsuarioDTO):UsuarioDTO
        + validateUserByUserName(userName:String,password:String):String
        + validateExistUserName(userName:String):boolean
    }
}
package repository{
    interface PersonaRepository{}
    interface RolRepository{}
    interface UsuarioRepository{}
}
PersonaService <-- PersonaRepository
PersonaService <-- PersonaMapperImplement
RolService <-- RolRepository
UsuarioService <-- UsuarioRepository
UsuarioService <-- UsuarioMapperImplement
PersonaMapperImplement ..|> PersonaMapper
RolMapperImplement ..|> RolMapper
UsuarioMapperImplement ..|> UsuarioMapper
UsuarioDTO ..> PersonaDTO
RolDTO <.. UsuarioDTO
UsuarioMapperImplement <-- Usuario
UsuarioMapperImplement <-- UsuarioDTO
RolMapperImplement <-- Rol
RolMapperImplement <-- RolDTO
PersonaMapperImplement <-- Persona
PersonaMapperImplement <-- PersonaDTO

@enduml